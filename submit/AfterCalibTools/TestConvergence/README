Here we explain how to use the macro for the convergence test

The macro is Convergence.C and can be used with the Convergence.sh script. 

Otherwise, you can simply use the ROOT prompt. Convergence.C defines a C++ class named Convergence with a constructor . Once it is ready, just use run() method.

If you use the .sh script, you have to:

1) Set parameters as in all other macros (path to EOS, dirName, ...)
2) Something new is nJump, which says that you want to do IC(n)-IC(n-nJump). Typically it will be 1, but at the moment nJump=2 is also supported
3) extension: if you run n iterations all in a row, this is not needed and you can leave it as "noExtension"; if you run more sets of ICs, and 
   each of them started from an existing one (we have this possibility now, see CalibCode/submit/parameters.py), then you can add extensions 
   (if you add more than one, i.e. ext1, ext2 ..., it is assumed that ext2 started from ext1 and so on). 
   See below for further details.


------------------
------------------
Using extensions:
------------------

Suppose you have an extension you want to add. Those additional iterations will have their own dirName, tagName parameters and so on. 
Lets's call them "dirName_ext" and "tagName_ext" and let's assume you made 4 more iterations (iter_0 up to iter_3). 
Then you have to set extension with the following convention:

extension="dirName_ext,4,tagName_ext"   (objects are separated by a comma)

When you have more than one extension, you simply create a single string with the same convention, with the different extensions separated by a colon
For example, with three extensions you set:

extension="dirName_ext1,n_ext1,tagName_ext2:dirName_ext2,n_ext2,tagName_ext2:dirName_ext3,n_ext3,tagName_ext3"

When extensions are used, plots are stored in the dedicated directory TestConvergence/extension.
