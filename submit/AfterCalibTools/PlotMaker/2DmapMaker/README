================================================
= Short guide for the usage of calibAna* codes =
================================================

This guide assumes the reader is familiar with inheritance in C++

////////////////
// INTRODUCTION

ECALpro codes produces ntuples called *calibMap.root. They store information about pi0/eta which we use to produce maps of EB and EE (e.g., the map of the number of signal events, map of pi0 mass and so on)

The basic idea is to have a "base" class with the skeleton of the tree structure as obtained from MakeClass and to have derived classes (exploiting C++ inheritance) to do the real analysis. This allows us to separate the code implementation from the MakeClass output (tree structure is not supposed to change: in case it happens, all we need is to do a new MakeClass, get the generated class and make our derived class inheriting from it).

At the end, we have two classes and their respective source and header files:
1) calibAnaEcal_base.* : class obtained using MakeClass from a root file containing the trees structure.
2) calibAnaEcal.*      : class implementing the real analysis on the trees

At this point we added two separate classes inheriting from calibAnaEcal, one for EB and one for EE. They are called calibAnaEcalEB and calibAnaEcalEE. 

Thanks to inheritance, an object declared as calibAnaEcalEB is also considered a calibAnaEcal object: all methods and variables owned by calibAnaEcal are owned by calibAnaEcalEB and calibAnaEcalEE as well (unless they are declared as private members). 
The base class and the derived one can have member functions with same name but different implementation: this is called function overriding.  

In a nut shell, (one of) the biggest advantage is that if there are common parts with the analysis on EB and EE, we can implement these parts just once in calibAnaEcal, while features specific to EB (EE) will be implemented in calibAnaEcalEB (calibAnaEcalEE). It also allows us to avoid filling the code with snippets like:

   if ("we are using EB") <do stuff for EB>; else if ("we are using EE") <do stuff for EE>; 

because the proper methods will be selected on the fly according to the rules of inheritance in C++

////////////////
// calibAnaEcal_base

This is the output of MakeClass, with only a little change: branches for variables specific to EB or EE, like "iphi" for EB or "iX" for EE, are set in the Init() method of calibAnaEcalEB and calibAnaEcalEE classes. 
In other words, "fChain->SetBranchAddress(...)" in Init() method were removed, leaving only those common to both EB and EE. They are put in calibAnaEcalEB or calibAnaEcalEE in their Init() method.

This is just to avoid annoying ROOT warnings, complaining because some branches declared and set in the .h file are not present in trees depending on whether you are using ntuples for EE or EB.

////////////////
// calibAnaEcal

What follows is a short description of some member functions.

setHistograms():
This member function is used to create new histograms (declared as class' member functions). It also takes care of filling the vector of histograms, used to store the histograms themselves and loop on them (for instance, to call the method to draw plots in a loop ).

setVerticalRangeInHisto():
This method is used to set the range for the vertical axis (z for 2D maps and y for 1D histograms). For the maximum, the least between the user's choice and the default value is used. Note that the values' spread in histograms for the vertical axis changes as a function of the iteration considered, so there is no "best-way" to choose these values. However, note that after few iterations the histograms should converge, so you could choose the limits accordingly. 

draw2Dmap():
This method manages the drawing of the 2D maps

drawProfile():
As above but for profiles

////////////////
// calibAnaEcalEB or calibAnaEcalEE

setHistograms():
It calls calibAnaEcal::setHistograms() and adds the setting of the lower range for the histograms. This setting is specific to EB or EE, so it was not added in calibAnaEcal::setHistograms(). Also, any histogram specific to EB or EE can be added here.

set2DmapMaxZaxisVector():
This method sets the upper range for the histograms.

